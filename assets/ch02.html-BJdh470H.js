import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,b as a,a as n,e as t,o}from"./app-Dqgl_vDn.js";const l={};function d(r,e){return o(),s("div",null,[e[0]||(e[0]=a("p",null,"介绍缓冲区、窗口、Tab的使用，说实话，我需求没这么大，更多的是了解单文件的 Vim 命令",-1)),n(" more "),e[1]||(e[1]=t(`<h1 id="ch02-buffers-windows-and-tabs" tabindex="-1"><a class="header-anchor" href="#ch02-buffers-windows-and-tabs"><span>Ch02. Buffers, Windows, and Tabs</span></a></h1><p>If you used a modern text editor before, you are probably familiar with windows and tabs. Vim uses three display abstractions instead of two: buffers, windows, and tabs. In this chapter, I will explain what buffers, windows, and tabs are and how they work in Vim.</p><p>Before you start, make sure you have the <code>set hidden</code> option in vimrc. Without it, whenever you switch buffers and your current buffer is not saved, Vim will prompt you to save the file (you don&#39;t want that if you want to move quickly). I haven&#39;t covered vimrc yet. If you don&#39;t have a vimrc, create one. It is usually placed in your home directory and is named <code>.vimrc</code>. I have mine on <code>~/.vimrc</code>. To see where you should create your vimrc, check out <code>:h vimrc</code>. Inside it, add:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>set hidden</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Save it, then source it (run <code>:source %</code> from inside the vimrc).</p><h2 id="buffers" tabindex="-1"><a class="header-anchor" href="#buffers"><span>Buffers</span></a></h2><p>What is a <em>buffer</em>?</p><p>A buffer is an in-memory space where you can write and edit some text. When you open a file in Vim, the data is bound to a buffer. When you open 3 files in Vim, you have 3 buffers.</p><p>Have two empty files, <code>file1.js</code> and <code>file2.js</code> available (if possible, create them with Vim). Run this in the terminal:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vim</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file1.js</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>What you are seeing is <code>file1.js</code> <em>buffer</em>. Whenever you open a new file, Vim creates a new buffer.</p><p>Exit Vim. This time, open two new files:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vim</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file1.js</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file2.js</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Vim currently displays <code>file1.js</code> buffer, but it actually creates two buffers: <code>file1.js</code> buffer and <code>file2.js</code> buffer. Run <code>:buffers</code> to see all the buffers (alternatively, you can use <code>:ls</code> or <code>:files</code> too). You should see <em>both</em> <code>file1.js</code> and <code>file2.js</code> listed. Running <code>vim file1 file2 file3 ... filen</code> creates n amount of buffers. Each time you open a new file, Vim create a new buffer for that file.</p><p>There are several ways you can traverse buffers:</p><ul><li><code>:bnext</code> to go to the next buffer (<code>:bprevious</code> to go to the previous buffer).</li><li><code>:buffer</code> + filename. Vim can autocomplete filename with <code>&lt;Tab&gt;</code>.</li><li><code>:buffer</code> + <code>n</code>, where <code>n</code> is the buffer number. For example, typing <code>:buffer 2</code> will take you to buffer #2.</li><li>Jump to the older position in the jump list with <code>Ctrl-O</code> and to the newer position with <code>Ctrl-I</code>. These are not buffer specific methods, but they can be used to jump between different buffers. I will explain jumps in further details in Chapter 5.</li><li>Go to the previously edited buffer with <code>Ctrl-^</code>.</li></ul><p>Once Vim creates a buffer, it will remain in your buffers list. To remove it, you can type <code>:bdelete</code>. It can also accept a buffer number as a parameter (<code>:bdelete 3</code> to delete buffer #3) or a filename (<code>:bdelete</code> then use <code>&lt;Tab&gt;</code> to autocomplete).</p><p>The hardest thing for me when learning about buffers was visualizing how they worked because my mind was used to windows from when using a mainstream text editor. A good analogy is a deck of playing cards. If I have 2 buffers, I have a stack of 2 cards. The card on top is the only card I see, but I know there are cards below it. If I see <code>file1.js</code> buffer displayed then the <code>file1.js</code> card is on the top of the deck. I can&#39;t see the other card, <code>file2.js</code> here, but it&#39;s there. If I switch buffers to <code>file2.js</code>, that <code>file2.js</code> card is now on the top of the deck and <code>file1.js</code> card is below it.</p><p>If you haven&#39;t used Vim before, this is a new concept. Take your time to understand it.</p><h2 id="exiting-vim" tabindex="-1"><a class="header-anchor" href="#exiting-vim"><span>Exiting Vim</span></a></h2><p>By the way, if you have multiple buffers opened, you can close all of them with quit-all:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>:qall</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If you want to close without saving your changes, just add <code>!</code> at the end:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>:qall!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>To save and quit all, run:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>:wqall</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="windows" tabindex="-1"><a class="header-anchor" href="#windows"><span>Windows</span></a></h2><p>A window is a viewport on a buffer. If you&#39;re coming from a mainstream editor, this concept may be familiar to you. Most text editors have the ability to display multiple windows. In Vim, you can also have multiple windows.</p><p>Let&#39;s open <code>file1.js</code> from the terminal again:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vim</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file1.js</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Earlier I wrote that you&#39;re looking at <code>file1.js</code> buffer. While that was correct, that statement was incomplete. You are looking at the <code>file1.js</code> buffer, displayed through <strong>a window</strong>. A window is how you are viewing a buffer through.</p><p>Don&#39;t quit Vim yet. Run:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>:split file2.js</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now you are looking at two buffers through <strong>two windows</strong>. The top window displays <code>file2.js</code> buffer. The bottom window displays <code>file1.js</code> buffer.</p><p>If you want to navigate between windows, use these shortcuts:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Ctrl-W H    Moves the cursor to the left window</span></span>
<span class="line"><span>Ctrl-W J    Moves the cursor to the window below</span></span>
<span class="line"><span>Ctrl-W K    Moves the cursor to the window upper</span></span>
<span class="line"><span>Ctrl-W L    Moves the cursor to the right window</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now run:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>:vsplit file3.js</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You are now seeing three windows displaying three buffers. One window displays <code>file3.js</code> buffer, another window displays <code>file2.js</code> buffer, and another window displays <code>file1.js</code> buffer.</p><p>You can have multiple windows displaying the same buffer. While you&#39;re on the top left window, type:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>:buffer file2.js</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now both two windows are displaying <code>file2.js</code> buffer. If you start typing on a <code>file2.js</code> window, you will see that both windows that display <code>file2.js</code> buffers are being updated in real-time.</p><p>To close the current window, you can run <code>Ctrl-W C</code> or type <code>:quit</code>. When you close a window, the buffer will still be there (run <code>:buffers</code> to confirm this).</p><p>Here are some useful normal-mode window commands:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Ctrl-W V    Opens a new vertical split</span></span>
<span class="line"><span>Ctrl-W S    Opens a new horizontal split</span></span>
<span class="line"><span>Ctrl-W C    Closes a window</span></span>
<span class="line"><span>Ctrl-W O    Makes the current window the only one on screen and closes other windows</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And here is a list of useful window command-line commands:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>:vsplit filename    Split window vertically</span></span>
<span class="line"><span>:split filename     Split window horizontally</span></span>
<span class="line"><span>:new filename       Create new window</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Take your time to understand them. For more information, check out <code>:h window</code>.</p><h2 id="tabs" tabindex="-1"><a class="header-anchor" href="#tabs"><span>Tabs</span></a></h2><p>A tab is a collection of windows. Think of it like a layout for windows. In most modern text editors (and modern internet browsers), a tab means an open file / page and when you close it, that file / page goes away. In Vim, a tab does not represent an opened file. When you close a tab in Vim, you are not closing a file. You are only closing the layout. The files opened in that layout are still not closed, they are still opened in their buffers.</p><p>Let&#39;s see Vim tabs in action. Open <code>file1.js</code>:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vim</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file1.js</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>To open <code>file2.js</code> in a new tab:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>:tabnew file2.js</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You can also let Vim autocomplete the file you want to open in a <em>new tab</em> by pressing <code>&lt;Tab&gt;</code> (no pun intended).</p><p>Below is a list of useful tab navigations:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>:tabnew file.txt    Open file.txt in a new tab</span></span>
<span class="line"><span>:tabclose           Close the current tab</span></span>
<span class="line"><span>:tabnext            Go to next tab</span></span>
<span class="line"><span>:tabprevious        Go to previous tab</span></span>
<span class="line"><span>:tablast            Go to last tab</span></span>
<span class="line"><span>:tabfirst           Go to first tab</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also run <code>gt</code> to go to next tab page (you can go to previous tab with <code>gT</code>). You can pass count as argument to <code>gt</code>, where count is tab number. To go to the third tab, do <code>3gt</code>.</p><p>One advantage of having multiple tabs is you can have different window arrangements in different tabs. Maybe you want your first tab to have 3 vertical windows and second tab to have a mixed horizontal and vertical windows layout. Tab is the perfect tool for the job!</p><p>To start Vim with multiple tabs, you can do this from the terminal:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vim</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file1.js</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file2.js</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file3.js</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="moving-in-3d" tabindex="-1"><a class="header-anchor" href="#moving-in-3d"><span>Moving in 3D</span></a></h2><p>Moving between windows is like traveling two-dimensionally along the X-Y axis in Cartesian coordinates. You can move to the top, right, bottom, and left window with <code>Ctrl-W H/J/K/L</code>.</p><p>Moving between buffers is like traveling across the Z axis in Cartesian coordinates. Imagine your buffer files lining up across the Z axis. You can traverse the Z axis one buffer at a time with <code>:bnext</code> and <code>:bprevious</code>. You can jump to any coordinate in Z axis with <code>:buffer filename/buffernumber</code>.</p><p>You can move in <em>three-dimensional space</em> by combining window and buffer movements. You can move to the top, right, bottom, or left window (X-Y navigations) with window movements. Since each window contains buffers, you can move forward and backward (Z navigations) with buffer movements.</p><h2 id="using-buffers-windows-and-tabs-the-smart-way" tabindex="-1"><a class="header-anchor" href="#using-buffers-windows-and-tabs-the-smart-way"><span>Using Buffers, Windows, and Tabs the Smart Way</span></a></h2><p>You have learned what buffers, windows, and tabs are and how they work in Vim. Now that you understand them better, you can use them in your own workflow.</p><p>Everyone has a different workflow, here is mine for example:</p><ul><li>First, I use buffers to store all the required files for the current task. Vim can handle many opened buffers before it starts slowing down. Plus having many buffers opened won&#39;t crowd my screen. I am only seeing one buffer (assuming I only have one window) at any time, allowing me to focus on one screen. When I need to go somewhere, I can quickly fly to any open buffer anytime.</li><li>I use multiple windows to view multiple buffers at once, usually when diffing files, reading docs, or following a code flow. I try to keep the number of windows opened to no more than three because my screen will get crowded (I use a small laptop). When I am done, I close any extra windows. Fewer windows means less distractions.</li><li>Instead of tabs, I use <a href="https://github.com/tmux/tmux/wiki" target="_blank" rel="noopener noreferrer">tmux</a> windows. I usually use multiple tmux windows at once. For example, one tmux window for client-side codes and another for backend codes.</li></ul><p>My workflow may look different from yours based on your editing style and that&#39;s fine. Experiment around to discover your own flow, suiting your coding style.</p>`,70))])}const u=i(l,[["render",d],["__file","ch02.html.vue"]]),p=JSON.parse('{"path":"/blog/vim/ch02.html","title":"Ch02. Buffers, Windows, and Tabs","lang":"zh-CN","frontmatter":{"title":"Ch02. Buffers, Windows, and Tabs","category":["技术"],"tag":["Vim"]},"headers":[{"level":2,"title":"Buffers","slug":"buffers","link":"#buffers","children":[]},{"level":2,"title":"Exiting Vim","slug":"exiting-vim","link":"#exiting-vim","children":[]},{"level":2,"title":"Windows","slug":"windows","link":"#windows","children":[]},{"level":2,"title":"Tabs","slug":"tabs","link":"#tabs","children":[]},{"level":2,"title":"Moving in 3D","slug":"moving-in-3d","link":"#moving-in-3d","children":[]},{"level":2,"title":"Using Buffers, Windows, and Tabs the Smart Way","slug":"using-buffers-windows-and-tabs-the-smart-way","link":"#using-buffers-windows-and-tabs-the-smart-way","children":[]}],"git":{"createdTime":1737707223000,"updatedTime":1737708145000,"contributors":[{"name":"Raymond.Lam","username":"Raymond.Lam","email":"raymond.lam@fanruan.com","commits":2,"url":"https://github.com/Raymond.Lam"}]},"readingTime":{"minutes":5.78,"words":1734},"filePathRelative":"blog/vim/ch02.md","localizedDate":"2025年1月24日","excerpt":"<p>介绍缓冲区、窗口、Tab的使用，说实话，我需求没这么大，更多的是了解单文件的 Vim 命令</p>\\n"}');export{u as comp,p as data};
