(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{440:function(t,e,r){t.exports=r.p+"assets/img/image-7.da0f8c67.png"},441:function(t,e,r){t.exports=r.p+"assets/img/image-8.aab817b4.png"},442:function(t,e,r){t.exports=r.p+"assets/img/image-9.423f69d8.png"},443:function(t,e,r){t.exports=r.p+"assets/img/image-10.ca6b1549.png"},587:function(t,e,r){"use strict";r.r(e);var a=r(2),s=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"第2章-了解概念与核心类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第2章-了解概念与核心类"}},[t._v("#")]),t._v(" 第2章　了解概念与核心类")]),t._v(" "),e("h3",{attrs:{id:"_2-1-了解sentinel的一些概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-了解sentinel的一些概念"}},[t._v("#")]),t._v(" 2.1　了解Sentinel的一些概念")]),t._v(" "),e("h4",{attrs:{id:"_2-1-1-资源、规则、资源指标数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-资源、规则、资源指标数据"}},[t._v("#")]),t._v(" 2.1.1　资源、规则、资源指标数据")]),t._v(" "),e("p",[t._v("在 Sentinel 中，资源、规则和资源指标数据这几个概念是密切相关的。规则需要围绕资源和资源的实时指标数据设置；限流、熔断等需要依据资源的实时指标数据判断是否达到规则设置的阈值，从而根据规则控制流量。")]),t._v(" "),e("ul",[e("li",[t._v("资源：资源可以是一个方法、一段代码、一个Servlet接口、一个RPC接口，通常用于指代一个接口。")]),t._v(" "),e("li",[t._v("规则：围绕资源的实时指标数据设置的规则，包括流量控制规则、熔断降级规则、系统自我保护规则和自定义的规则。")]),t._v(" "),e("li",[t._v("资源指标数据：Sentinel以资源为维度统计指标数据，资源的实时指标数据反映了资源的实时状态，这些指标包括每秒请求数、请求平均耗时、每秒异常总数等。")])]),t._v(" "),e("h4",{attrs:{id:"_2-1-2-调用链与调用树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-调用链与调用树"}},[t._v("#")]),t._v(" 2.1.2　调用链与调用树")]),t._v(" "),e("p",[t._v("将按过程调用方式处理一次请求时所用到的方法串联起来就是一条调用链。在Sentinel中，只是将一次调用所经过的资源串联起来。在同一条调用链上的资源可以共享一些变量。")]),t._v(" "),e("p",[t._v("假设调用订单支付接口完成订单支付需要调用某宝的支付接口，并且在支付完成后调用内部的其他服务接口，代码如下。")]),t._v(" "),e("p",[e("img",{attrs:{src:r(440),alt:"alt text"}})]),t._v(" "),e("p",[t._v("其中，orderPay、aliPay、other这3个方法都是被Sentinel保护的资源。那么，此案例中共有两条调用链，这两条调用链有相同的入口资源节点——POST:/orderPay，如图2.1和图2.2所示。")]),t._v(" "),e("p",[e("img",{attrs:{src:r(441),alt:"zz"}})]),t._v(" "),e("p",[t._v("调用树是由整个应用的所有调用链构造而成的一棵N叉树。从根节点到每一个叶子节点所形成的路径都是一条完整的资源调用链，这些调用链都有一个共同的根节点——ROOT，如图2.3所示。")]),t._v(" "),e("p",[t._v("其中，根节点（ROOT）和入口节点（sentinel_spring_web_context）是调用链上的非资源节点，而POST:/orderPay节点、POST:/aliPay节点和POST:/other节点都是资源节点。")]),t._v(" "),e("p",[t._v("除根节点（ROOT）外，调用树上的每条调用链都可能与其他调用链有着共同的入口节点，因此，入口相同的调用链并不代表它们就是同一条调用链。")]),t._v(" "),e("p",[e("img",{attrs:{src:r(442),alt:"alt text"}})]),t._v(" "),e("p",[t._v("在图2.3中，对于资源节点POST:/aliPay与资源节点POST:/other所在的调用链，它们都有着共同的根节点ROOT、共同的入口（非资源）节点sentinel_spring_web_context和共同的入口资源节点POST:/orderPay。")]),t._v(" "),e("h4",{attrs:{id:"_2-1-3-processorslot-处理器插槽"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-3-processorslot-处理器插槽"}},[t._v("#")]),t._v(" 2.1.3　ProcessorSlot 处理器插槽")]),t._v(" "),e("p",[t._v("处理器插槽（ProcessorSlot）是Sentinel提供的插件，资源指标数据的统计、限流、熔断降级、系统自适应保护等都需要通过处理器插槽实现。")]),t._v(" "),e("p",[t._v("Sentinel以流量为切入点，拦截资源对应方法/代码块的执行。Sentinel按顺序将注册的处理器插槽构造成有序的处理器插槽链表（ProcessorSlotChain），并在执行方法之前根据ProcessorSlotChain调度处理器插槽完成资源指标数据的统计、限流、熔断降级等。")]),t._v(" "),e("p",[t._v("ProcessorSlotChain是一个单向链表，其示意图如图2.4所示。")]),t._v(" "),e("p",[e("img",{attrs:{src:r(443),alt:"alt text"}})]),t._v(" "),e("p",[t._v("处理器插槽可以在处理请求之前和完成请求处理之后进行各种资源指标数据的统计，也可以在处理请求之前决定是否放行请求并控制请求的实际通过时间。另外，处理器插槽可以通过抛出异常来拒绝请求，也可以通过将线程休眠来控制请求的实际通过时间。")]),t._v(" "),e("h3",{attrs:{id:"_2-2-资源指标数据统计相关类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-资源指标数据统计相关类"}},[t._v("#")]),t._v(" 2.2　资源指标数据统计相关类")]),t._v(" "),e("p",[t._v("资源指标数据统计是Sentinel的核心功能，例如，限流和熔断降级都是依赖资源的实时指标数据统计实现的。")]),t._v(" "),e("blockquote",[e("p",[t._v("为了能够提供丰富的流量控制功能，Sentinel使用Node封装底层资源指标数据的统计，从多个不同维度为资源统计实时的指标数据，如区分不同调用来源、区分不同调用链。")])]),t._v(" "),e("h4",{attrs:{id:"_2-2-1-resourcewrapper"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-resourcewrapper"}},[t._v("#")]),t._v(" 2.2.1　ResourceWrapper")]),t._v(" "),e("p",[t._v("在Sentinel中，使用ResourceWrapper实例表示资源。ResourceWrapper类源码如下。")]),t._v(" "),e("blockquote",[e("p",[t._v("如果一个资源描述的是一个接口，则资源名称通常就是接口的URL，如GET:/api/demo。")])])])}),[],!1,null,null,null);e.default=s.exports}}]);